'use strict';function Node(d=null){this.value=d;this.right=this.left=this.height=this.parent=null;this.json={color:"steelblue",name:this.value,direction:null,children:[]}}var stepDelay=900,algorithim=["Add a root for the tree","Add Child At Left","Add Child at Right","If Parent value Bigger than current-SWICH"];
function Heap(){this.storage=[];this.insert=function(d){if(0==GetSize)alert("Please Enter a Size of Heap");else if(this.storage.length<sizeArray){void 0===d&&(d=parseInt(document.getElementById("value").value),document.getElementById("value").value="");this.storage.push(d);insertNode(d);var a=this,e=function(b){var c=Math.ceil(b/2-1);if(0>c||a.storage[b]<=a.storage[c])return"value added to index "+b;a.storage[b]^=a.storage[c];a.storage[c]^=a.storage[b];a.storage[b]^=a.storage[c];swapNodes(b,c);setTimeout(function(){return e(c)},
stepDelay)};setTimeout(function(){return e(a.storage.length-1)},stepDelay)}else alert("Heap Is Full")};Heap.prototype.removeMax=function(){if(0===this.storage.length)return null;if(1===this.storage.length){var d=this.storage.pop();restoreInitial();return d}d=this.storage[0];this.storage[0]=this.storage.pop();swapRoot();var a=this,e=function(b){var c=b;2*b+1<a.storage.length&&a.storage[2*b+1]>a.storage[b]&&(c=2*b+1);2*b+2<a.storage.length&&a.storage[2*b+2]>a.storage[c]&&(c=2*b+2);c!==b&&(a.storage[b]^=
a.storage[c],a.storage[c]^=a.storage[b],a.storage[b]^=a.storage[c],n=this.storage,swapNodes(c,b),setTimeout(function(){e(c)},stepDelay))};setTimeout(function(){n=this.storage;e(0)},stepDelay);return d}}var hp=new Heap;